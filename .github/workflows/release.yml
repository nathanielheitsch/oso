name: Create Release
on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
    branches:
      - main

jobs:
  version:
    name: Compute and verify the version number
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/check_version
      - name: Set version env
        run: echo "oso_version=$(cat VERSION)" >> $GITHUB_ENV
      - name: Check github ref matches
        if: startsWith(github.ref, 'refs/tags/')
        env:
          github_ref: ${{ github.ref }}
        run: grep "${github_ref/refs\/tags\/v/}" VERSION

  linux_libs:
    name: Build release libraries on Linux
    runs-on: ubuntu-latest
    needs: [version]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.69.0
          override: true
      - name: Install cross
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release download --repo cross-rs/cross --pattern 'cross-x86_64-unknown-linux-gnu\.tar\.gz'
          tar -xzvf cross-x86_64-unknown-linux-gnu.tar.gz
      - name: Build aarch64 dynamic lib
        run: |
          rustup target add aarch64-unknown-linux-gnu
          RUSTFLAGS="-C target-feature=-crt-static" ./cross build --target aarch64-unknown-linux-gnu --release -p polar-c-api
      - name: Build aarch64 release musl library
        run: |
          rustup target add aarch64-unknown-linux-musl
          RUSTFLAGS="-C target-feature=-crt-static" ./cross build --target aarch64-unknown-linux-musl --release -p polar-c-api
      - name: Build x86_64 release libraries
        run: cargo build --release -p polar-c-api
      - name: Build x86_64 release musl library
        run: |
          rustup target add x86_64-unknown-linux-musl
          RUSTFLAGS="-C target-feature=-crt-static" cargo build --target x86_64-unknown-linux-musl --release -p polar-c-api
      - name: Rename static lib
        run: mv target/release/libpolar.a target/libpolar-${{runner.os}}.a
      - name: Rename x86_64 static lib
        run: mv target/x86_64-unknown-linux-musl/release/libpolar.a target/libpolar-musl-x86_64.a
      - name: Rename aarch64 static lib
        run: mv target/aarch64-unknown-linux-musl/release/libpolar.a target/libpolar-musl-aarch64.a
      - name: Rename x86_64 dynamic lib
        run: mv target/release/libpolar.so target/libpolar-x86_64.so
      - name: Rename aarch64 dynamic lib
        run: mv target/aarch64-unknown-linux-gnu/release/libpolar.so target/libpolar-aarch64.so
      - name: Prepare flat oso_library artifact
        run: |
          mkdir -p oso_library_flat
          cp target/libpolar-x86_64.so oso_library_flat/
          cp target/libpolar-aarch64.so oso_library_flat/
          cp polar-c-api/polar.h oso_library_flat/
      - uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: oso_library_linux
          path: oso_library_flat/*

      - name: Prepare flat oso_static_library artifact
        run: |
          mkdir -p oso_static_library_flat
          cp target/libpolar-${{runner.os}}.a oso_static_library_flat/
          cp target/libpolar-musl-x86_64.a oso_static_library_flat/
          cp target/libpolar-musl-aarch64.a oso_static_library_flat/
          cp polar-c-api/polar.h oso_static_library_flat/
      - uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: oso_static_library_linux
          path: oso_static_library_flat/*

  macos_libs:
    name: Build release libraries on MacOS
    runs-on: macos-latest
    needs: [version]
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.69.0
          override: true
      - name: Build release library
        run: cargo build --release -p polar-c-api
      - name: Build release arm library
        run: |
          rustup target add aarch64-apple-darwin
          SDKROOT=$(xcrun -sdk macosx11.0 --show-sdk-path) \
            MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx11.0 --show-sdk-platform-version) \
            cargo build --target aarch64-apple-darwin --release -p polar-c-api
      - name: Rename static ARM lib
        run: mv target/aarch64-apple-darwin/release/libpolar.a target/libpolar-macOS-arm.a
      - name: Rename dynamic ARM lib
        run: mv target/aarch64-apple-darwin/release/libpolar.dylib target/libpolar-macOS-arm.dylib
      - uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: oso_library_macos
          path: |
            target/libpolar-macOS-arm.dylib
      - name: Prepare flat oso_static_library artifact
        run: |
          mkdir -p oso_static_library_flat
          cp target/libpolar-macOS-arm.a oso_static_library_flat/
          cp polar-c-api/polar.h oso_static_library_flat/
      - uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: oso_static_library_macos
          if-no-files-found: error
          path: oso_static_library_flat/*

  build_linux_wheels:
    name: Build wheels on Linux
    runs-on: ubuntu-latest
    needs: [version, linux_libs]
    steps:
      - uses: actions/checkout@v2
      - name: Download static libs
        uses: actions/download-artifact@v4
        with:
          name: oso_static_library_linux
      - name: Copy static library.
        run: |
          mkdir -p languages/python/oso/native
          ls -la
          cp -r libpolar-musl-x86_64.a languages/python/oso/native/libpolar.a
          cp -r polar.h languages/python/oso/native/polar.h
      - name: Copy in readme
        run: |
          rm languages/python/oso/README.md
          cp README.md languages/python/oso/README.md
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          # Skip Python 2.7 and Python 3.5
          CIBW_SKIP: "cp36-* cp37-* cp38-* pp37-* pp38-*"
          # 64-bit builds only
          CIBW_BUILD: "*64"
          # Used in build.py to find right files
          CIBW_ENVIRONMENT: OSO_ENV=CI
        with:
          package-dir: languages/python/oso
      - uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: wheel-linux
          path: ./wheelhouse/*.whl

  build_macos_wheels:
    name: Build wheels on MacOS
    runs-on: macos-latest
    needs: [version, macos_libs]
    steps:
      - uses: actions/checkout@v2
      - name: Download static libs
        uses: actions/download-artifact@v4
        with:
          name: oso_static_library_macos
      - name: Copy static library.
        run: |
          mkdir -p languages/python/oso/native
          ls -la
          cp -r libpolar-macOS-arm.a languages/python/oso/native/libpolar.a
          cp -r polar.h languages/python/oso/native/polar.h
      - name: Copy in readme
        run: |
          rm languages/python/oso/README.md
          cp README.md languages/python/oso/README.md
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          # Skip Python 2.7 and Python 3.5
          CIBW_SKIP: "cp36-* cp37-* cp38-* pp37-* pp38-*"
          # 64-bit builds only
          CIBW_BUILD: "*64"
          # Used in build.py to find right files
          CIBW_ENVIRONMENT: OSO_ENV=CI
          # Build a macos wheel that works for x86 and ARM
          CIBW_ARCHS: arm64 universal2
        with:
          package-dir: languages/python/oso
      - uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: wheel-macos
          path: ./wheelhouse/*.whl
