name: Create Release
on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
    branches:
      - main

jobs:
  version:
    name: Compute and verify the version number
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/check_version
      - name: Set version env
        run: echo "oso_version=$(cat VERSION)" >> $GITHUB_ENV
      - name: Check github ref matches
        if: startsWith(github.ref, 'refs/tags/')
        env:
          github_ref: ${{ github.ref }}
        run: grep "${github_ref/refs\/tags\/v/}" VERSION

  linux_libs:
    name: Build release libraries on Linux
    runs-on: ubuntu-latest
    needs: [version]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.69.0
          override: true
      - name: Install cross
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release download --repo cross-rs/cross --pattern 'cross-x86_64-unknown-linux-gnu\.tar\.gz'
          tar -xzvf cross-x86_64-unknown-linux-gnu.tar.gz
      - name: Build aarch64 dynamic lib
        run: |
          rustup target add aarch64-unknown-linux-gnu
          RUSTFLAGS="-C target-feature=-crt-static" ./cross build --target aarch64-unknown-linux-gnu --release -p polar-c-api
      - name: Build aarch64 release musl library
        run: |
          rustup target add aarch64-unknown-linux-musl
          RUSTFLAGS="-C target-feature=-crt-static" ./cross build --target aarch64-unknown-linux-musl --release -p polar-c-api
      - name: Build x86_64 release libraries
        run: cargo build --release -p polar-c-api
      - name: Build x86_64 release musl library
        run: |
          rustup target add x86_64-unknown-linux-musl
          RUSTFLAGS="-C target-feature=-crt-static" cargo build --target x86_64-unknown-linux-musl --release -p polar-c-api
      - name: Rename static lib
        run: mv target/release/libpolar.a target/libpolar-${{runner.os}}.a
      - name: Rename x86_64 static lib
        run: mv target/x86_64-unknown-linux-musl/release/libpolar.a target/libpolar-musl-x86_64.a
      - name: Rename aarch64 static lib
        run: mv target/aarch64-unknown-linux-musl/release/libpolar.a target/libpolar-musl-aarch64.a
      - name: Rename x86_64 dynamic lib
        run: mv target/release/libpolar.so target/libpolar-x86_64.so
      - name: Rename aarch64 dynamic lib
        run: mv target/aarch64-unknown-linux-gnu/release/libpolar.so target/libpolar-aarch64.so
      - uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: oso_library
          path: |
            target/libpolar-x86_64.so
            target/libpolar-aarch64.so
            polar-c-api/polar.h
      - uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: oso_static_library
          path: |
            target/libpolar-${{runner.os}}.a
            target/libpolar-musl-x86_64.a
            target/libpolar-musl-aarch64.a
            polar-c-api/polar.h

  macos_libs:
    name: Build release libraries on MacOS
    runs-on: macos-latest
    needs: [version]
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.69.0
          override: true
      - name: Build release library
        run: cargo build --release -p polar-c-api
      - name: Build release arm library
        run: |
          rustup target add aarch64-apple-darwin
          SDKROOT=$(xcrun -sdk macosx11.0 --show-sdk-path) \
            MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx11.0 --show-sdk-platform-version) \
            cargo build --target aarch64-apple-darwin --release -p polar-c-api
      - name: Rename static ARM lib
        run: mv target/aarch64-apple-darwin/release/libpolar.a target/libpolar-macOS-arm.a
      - name: Rename dynamic ARM lib
        run: mv target/aarch64-apple-darwin/release/libpolar.dylib target/libpolar-macOS-arm.dylib
      - uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: oso_library
          path: |
            target/libpolar-macOS-arm.dylib
      - uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: oso_static_library
          if-no-files-found: error
          path: |
            target/libpolar-macOS-arm.a
            polar-c-api/polar.h

  build_linux_wheels:
    name: Build wheels on Linux
    runs-on: ubuntu-latest
    needs: [version, linux_libs]
    steps:
      - uses: actions/checkout@v2
      - name: Download static libs
        uses: actions/download-artifact@v3
        with:
          name: oso_static_library
      - name: Copy static library.
        run: |
          mkdir -p languages/python/oso/native
          cp -r oso_static_library/libpolar-musl-x86_64.a languages/python/oso/native/libpolar.a
          cp -r oso_static_library/polar.h languages/python/oso/native/polar.h
      - name: Copy in readme
        run: |
          rm languages/python/oso/README.md
          cp README.md languages/python/oso/README.md
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          # Skip Python 2.7 and Python 3.5
          CIBW_SKIP: "cp36-* cp37-* cp38-* pp37-* pp38-*"
          # 64-bit builds only
          CIBW_BUILD: "*64"
          # Used in build.py to find right files
          CIBW_ENVIRONMENT: OSO_ENV=CI
        with:
          package-dir: languages/python/oso
      - uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: wheel
          path: ./wheelhouse/*.whl

  build_macos_wheels:
    name: Build wheels on MacOS
    runs-on: macos-latest
    needs: [version, macos_libs]
    steps:
      - uses: actions/checkout@v2
      - name: Download static libs
        uses: actions/download-artifact@v3
        with:
          name: oso_static_library
      - name: Copy static library.
        run: |
          mkdir -p languages/python/oso/native
          cp -r oso_static_library/libpolar-macOS-arm.a languages/python/oso/native/libpolar.a
          cp -r oso_static_library/polar.h languages/python/oso/native/polar.h
      - name: Copy in readme
        run: |
          rm languages/python/oso/README.md
          cp README.md languages/python/oso/README.md
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3
        env:
          # Skip Python 2.7 and Python 3.5
          CIBW_SKIP: "cp36-* cp37-* cp38-* pp37-* pp38-*"
          # 64-bit builds only
          CIBW_BUILD: "*64"
          # Used in build.py to find right files
          CIBW_ENVIRONMENT: OSO_ENV=CI
          # Build a macos wheel that works for x86 and ARM
          CIBW_ARCHS: arm64 universal2
        with:
          package-dir: languages/python/oso
      - uses: actions/upload-artifact@v4
        with:
          include-hidden-files: true
          name: wheel
          path: ./wheelhouse/*.whl


  validate_python_linux:
    name: Test python ${{ matrix.python-version }} on Linux
    needs: [build_linux_wheels]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v2
      - name: Set version env
        id: version
        run: echo "::set-output name=oso_version::$(cat VERSION)"
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download oso python wheels from package run
        uses: actions/download-artifact@v3
        with:
          name: wheel
      - name: "test"
        run: |
          # first install _only_ the wheel and make sure it's available
          pip install oso==${{ steps.version.outputs.oso_version }} -f ../wheel --no-deps --no-index
          # then install deps too
          pip install oso==${{ steps.version.outputs.oso_version }} -f ../wheel
          python test.py
        working-directory: test

  validate_python_macos_11:
    name: Test python ${{ matrix.python-version }} on MacOS
    needs: [build_macos_wheels]
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v2
      - name: Set version env
        id: version
        run: echo "::set-output name=oso_version::$(cat VERSION)"
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download oso python wheels from package run
        uses: actions/download-artifact@v3
        with:
          name: wheel
      - name: "test"
        run: |
          # first install _only_ the wheel and make sure it's available
          pip install oso==${{ steps.version.outputs.oso_version }} -f ../wheel --no-deps --no-index
          # then install deps too
          pip install oso==${{ steps.version.outputs.oso_version }} -f ../wheel
          python test.py
        working-directory: test

  validate_python_macos_arm:
    name: Test python on MacOS M1
    needs: [build_macos_wheels]
    runs-on: [self-hosted, m1]
    steps:
      - uses: actions/checkout@v2
      - name: Set version env
        id: version
        run: echo "::set-output name=oso_version::$(cat VERSION)"
      - name: Download oso python wheels from package run
        uses: actions/download-artifact@v3
        with:
          name: wheel
      - name: "test python 3.9"
        run: |
          arch -arm64 /opt/homebrew/opt/python@3.9/bin/python3 -m venv venv39
          arch -arm64 ./venv39/bin/pip install oso==${{ steps.version.outputs.oso_version }} -f ../wheel --no-deps --no-index
          arch -arm64 ./venv39/bin/pip install oso==${{ steps.version.outputs.oso_version }} -f ../wheel
          arch -arm64 ./venv39/bin/python test.py
        working-directory: test
      - name: "test python 3.10"
        run: |
          arch -arm64 /opt/homebrew/opt/python@3.10/bin/python3 -m venv venv310
          arch -arm64 ./venv310/bin/pip install oso==${{ steps.version.outputs.oso_version }} -f ../wheel --no-deps --no-index
          arch -arm64 ./venv310/bin/pip install oso==${{ steps.version.outputs.oso_version }} -f ../wheel
          arch -arm64 ./venv310/bin/python test.py
        working-directory: test
      - name: "test python 3.11"
        run: |
          arch -arm64 /opt/homebrew/opt/python@3.11/bin/python3 -m venv venv311
          arch -arm64 ./venv311/bin/pip install oso==${{ steps.version.outputs.oso_version }} -f ../wheel --no-deps --no-index
          arch -arm64 ./venv311/bin/pip install oso==${{ steps.version.outputs.oso_version }} -f ../wheel
          arch -arm64 ./venv311/bin/python test.py
        working-directory: test
      - name: "test python 3.12"
        run: |
          arch -arm64 /opt/homebrew/opt/python@3.12/bin/python3 -m venv venv312
          arch -arm64 ./venv312/bin/pip install oso==${{ steps.version.outputs.oso_version }} -f ../wheel --no-deps --no-index
          arch -arm64 ./venv312/bin/pip install oso==${{ steps.version.outputs.oso_version }} -f ../wheel
          arch -arm64 ./venv312/bin/python test.py
        working-directory: test
      - name: "test python 3.13"
        run: |
          arch -arm64 /opt/homebrew/opt/python@3.12/bin/python3 -m venv venv312
          arch -arm64 ./venv313/bin/pip install oso==${{ steps.version.outputs.oso_version }} -f ../wheel --no-deps --no-index
          arch -arm64 ./venv313/bin/pip install oso==${{ steps.version.outputs.oso_version }} -f ../wheel
          arch -arm64 ./venv313/bin/python test.py
        working-directory: test

  validate_python_musl:
    name: Test python ${{ matrix.python-version }} on Alpine
    needs: [build_linux_wheels]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v2
      - name: Set version env
        id: version
        run: echo "::set-output name=oso_version::$(cat VERSION)"
      - name: Download oso python wheels from package run
        uses: actions/download-artifact@v3
        with:
          name: wheel
      - run: docker run --rm --env OSO_VERSION -v `pwd`:/oso python:${{ matrix.python-version }}-alpine oso/scripts/test_musl.sh
        env:
          OSO_VERSION: ${{ steps.version.outputs.oso_version }}


  test_quickstarts:
    name: Test Quickstarts
    runs-on: ubuntu-latest
    needs: [version]
    steps:
      - uses: actions/checkout@v2
      - name: Initialize submodules
        run: make -C docs/examples update-submodules
      - name: Check that submodules are all up-to-date
        run: |
          git submodule foreach git remote update
          git submodule foreach '[ -z $(git --no-pager diff origin/main main) ]'
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-debug-${{ hashFiles('**/Cargo.lock') }}
      - name: Use Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: "3.7"
      - name: Use Ruby 2.7
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
          ruby-version: "2.7"
          working-directory: "docs/examples/quickstart/ruby"
      - name: Use Node.js 12
        uses: actions/setup-node@v1
        with:
          node-version: "12"
      - name: Use Java 11
        uses: actions/setup-java@v1
        with:
          java-version: "11"
      - name: Use stable Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.69.0
          override: true
      - name: Use Go 1.14
        uses: actions/setup-go@v2
        with:
          go-version: "1.14"
      - name: Run quickstart tests
        run: make -C docs test-quickstarts-release

  release:
    name: Create release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      [
        build_linux_wheels,
        build_macos_wheels,
        validate_python_linux,
        validate_python_macos_11,
        validate_python_musl,
        test_quickstarts,
      ]
    steps:
      - name: Set version env
        id: version
        env:
          github_ref: ${{ github.ref }}
        run: echo "::set-output name=oso_version::${github_ref/refs\/tags\/v/}"
      - name: Download oso dylibs
        uses: actions/download-artifact@v3
        with:
          name: oso_library
      - name: Zip libraries
        run: zip --junk-paths -r oso-lib.zip oso_library/
      - name: Download oso python wheels from package run
        uses: actions/download-artifact@v3
        with:
          name: wheel
      - name: Zip wheels
        run: zip --junk-paths -r oso-python.zip wheel/
      - name: Download oso gem from package run
        uses: actions/download-artifact@v3
        with:
          name: gem
      - name: Zip ruby gem
        run: zip --junk-paths -r oso-ruby.zip gem/
      - name: Download oso jar from package run
        uses: actions/download-artifact@v3
        with:
          name: jar
      - name: Zip Java JAR
        run: zip --junk-paths -r oso-java.zip jar/
      - name: Download oso javascript package from package run
        uses: actions/download-artifact@v3
        with:
          name: oso_js_node
      - name: Create JS release artifact
        working-directory: oso_js_node
        run: npm pack
      - name: Download oso go lib
        uses: actions/download-artifact@v3
        with:
          name: go
      - name: Zip Go source code
        run: zip -r go-oso.zip go/
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.oso_version }}
          release_name: oso ${{ steps.version.outputs.oso_version }}
          body: |
            oso ${{ steps.version.outputs.oso_version }}
          draft: false
          prerelease: true
      - name: Upload Libraries
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./oso-lib.zip
          asset_name: oso-lib-${{ steps.version.outputs.oso_version }}.zip
          asset_content_type: application/zip
      - name: Upload Python Package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./oso-python.zip
          asset_name: oso-python-${{ steps.version.outputs.oso_version }}.zip
          asset_content_type: application/zip
      
  # TODO(gj): update this to post to Quill or a private channel on community Slack.
  alert-failure:
    name: Alert on failure
    if: ${{ !success() }}
    runs-on: ubuntu-latest
    needs:
      [
        validate_python_linux,
        validate_python_macos_11,
        validate_python_macos_arm,
        validate_python_musl,
        test_quickstarts,
      ]
    steps:
      - uses: rtCamp/action-slack-notify@master
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
        env:
          SLACK_CHANNEL: firehose
          SLACK_COLOR: "danger"
          SLACK_MESSAGE: "${{ github.event.head_commit.url }}"
          SLACK_TITLE: "Release job failed."
          SLACK_USERNAME: github-actions
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_TO_FIREHOSE }}
